---
title: "Making chains"
engine: julia
---

```{julia}
import Random
Random.seed!(468);
```

```{julia}
using Turing, DynamicPPL, MCMCChains
setprogress!(false)

const D = DynamicPPL
const TU = DynamicPPL.TestUtils
const DM = TU.DEMO_MODELS
```

```{julia}
model = TU.demo_assume_multivariate_observe()
chn = sample(model, Prior(), 100)
```

```{julia}
using DataStructures: OrderedSet
"""
    make_chain_from_prior([rng,] model, n_iters)

Construct an MCMCChains.Chains object by sampling from the prior of `model` for
`n_iters` iterations.
"""
function make_chain_from_prior(rng::Random.AbstractRNG, model::Model, n_iters::Int)
    # Sample from the prior
    varinfos = [VarInfo(rng, model) for _ in 1:n_iters]
    # Collect all the varnames found in any of the varinfos.
    all_varnames = OrderedSet{VarName}()
    # Convert each varinfo into an OrderedDict of vns => params.
    # We have to use varname_and_value_leaves so that each parameter is a scalar
    dicts = map(varinfos) do t
        vals = DynamicPPL.values_as(t, OrderedDict)
        iters = map(DynamicPPL.varname_and_value_leaves, keys(vals), values(vals))
        tuples = mapreduce(collect, vcat, iters)
        push!(all_varnames, map(first, tuples)...)
        OrderedDict(tuples)
    end
    all_varnames = collect(all_varnames)
    # Construct matrix of values
    vals = [get(dict, vn, missing) for dict in dicts, vn in all_varnames]
    # Construct and return the Chains object
    return Chains(vals, all_varnames)
end
function make_chain_from_prior(model::Model, n_iters::Int)
    return make_chain_from_prior(Random.default_rng(), model, n_iters)
end
```


```{julia}
#| error: true
make_chain_from_prior(model, 100)
```
